/// <reference types="node" />
import { StageType } from './new-rules/types';
import { HeaderValue } from './headers';
/**
 * The StageManager keeps track of where we are in the process of an API call
 * and invokes appropriate actions at each stage.
 */
export declare class StageManager {
    private ruleActions;
    private reportActions;
    private maxBodySize;
    private startedAt?;
    stage?: Stage;
    constructor(ruleActions: RuleStageActions, reportActions: ReportStageActions, maxBodySize: number);
    connect(connection: ConnectionData): void;
    request(request: RequestData): void;
    response(response: ResponseData): void;
    bodies({ request, response }: {
        request?: Buffer;
        response?: Buffer;
    }): void;
    connectionError(error: any): void;
    private expectStage;
    private parseBody;
    private getTiming;
}
/**
 * Typing
 */
export declare enum Protocol {
    Http = "http",
    Https = "https"
}
export interface ConnectionData {
    hostname: string;
    port: number;
    protocol: Protocol;
}
export interface RequestData {
    headers: Record<string, HeaderValue>;
    method: string;
    path: string;
    params: Record<string, string>;
}
export interface ResponseData {
    status: number | undefined;
    headers: Record<string, string | string[] | undefined>;
}
export interface BodiesData {
    request?: any;
    requestSize?: number;
    response?: any;
    responseSize?: number;
}
export interface TimingData {
    startedAt: number;
    endedAt: number;
    duration: number;
}
export interface Stage {
    typeName: StageType;
    connection: ConnectionData;
    request?: RequestData;
    response?: ResponseData;
    bodies?: BodiesData;
    error?: any;
    timing?: TimingData;
}
interface RuleStageActions {
    evaluateRules: (stage: Stage) => void;
}
interface ReportStageActions {
    report: (stage: Stage) => void;
}
export {};
